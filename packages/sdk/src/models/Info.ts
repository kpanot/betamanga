/* tslint:disable */
/* eslint-disable */
/**
 * @betamanga/backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0-placeholder
 * Contact: kilian.panot@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Contact } from './Contact';
import {
    ContactFromJSON,
    ContactFromJSONTyped,
    ContactToJSON,
} from './Contact';
import type { License } from './License';
import {
    LicenseFromJSON,
    LicenseFromJSONTyped,
    LicenseToJSON,
} from './License';

/**
 * 
 * @export
 * @interface Info
 */
export interface Info {
    /**
     * 
     * @type {string}
     * @memberof Info
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Info
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Info
     */
    termsOfService?: string;
    /**
     * 
     * @type {Contact}
     * @memberof Info
     */
    contact?: Contact;
    /**
     * 
     * @type {License}
     * @memberof Info
     */
    license?: License;
    /**
     * 
     * @type {string}
     * @memberof Info
     */
    version: string;
}

/**
 * Check if a given object implements the Info interface.
 */
export function instanceOfInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "version" in value;

    return isInstance;
}

export function InfoFromJSON(json: any): Info {
    return InfoFromJSONTyped(json, false);
}

export function InfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): Info {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'title': json['title'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'termsOfService': !exists(json, 'termsOfService') ? undefined : json['termsOfService'],
        'contact': !exists(json, 'contact') ? undefined : ContactFromJSON(json['contact']),
        'license': !exists(json, 'license') ? undefined : LicenseFromJSON(json['license']),
        'version': json['version'],
    };
}

export function InfoToJSON(value?: Info | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'title': value.title,
        'description': value.description,
        'termsOfService': value.termsOfService,
        'contact': ContactToJSON(value.contact),
        'license': LicenseToJSON(value.license),
        'version': value.version,
    };
}

