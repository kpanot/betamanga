/* eslint-disable */
/**
 * @betamanga/backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0-placeholder
 * Contact: kilian.panot@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  JwtTokenResponse,
  PostBasicAuthParameter,
} from '../models';
import {
    JwtTokenResponseFromJSON,
    JwtTokenResponseToJSON,
    PostBasicAuthParameterFromJSON,
    PostBasicAuthParameterToJSON,
} from '../models';

export interface AuthLoginRequest {
    postBasicAuthParameter: PostBasicAuthParameter;
}

/**
 *
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Identify user and retrieve bearer token to access to limited apis
     * Identify user
     */
    async authLoginRaw(requestParameters: AuthLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtTokenResponse>> {
        if (requestParameters.postBasicAuthParameter === null || requestParameters.postBasicAuthParameter === undefined) {
            throw new runtime.RequiredError('postBasicAuthParameter','Required parameter requestParameters.postBasicAuthParameter was null or undefined when calling authLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostBasicAuthParameterToJSON(requestParameters.postBasicAuthParameter),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JwtTokenResponseFromJSON(jsonValue));
    }

    /**
     * Identify user and retrieve bearer token to access to limited apis
     * Identify user
     */
    async authLogin(requestParameters: AuthLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtTokenResponse> {
        const response = await this.authLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logout user and revoke refresh token
     * Logout user
     */
    async authLogoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/logout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Logout user and revoke refresh token
     * Logout user
     */
    async authLogout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authLogoutRaw(initOverrides);
    }

    /**
     * Use refresh token to renew bearer token
     * Renew Bearer token
     */
    async authRefreshTokensRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtTokenResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/refresh`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JwtTokenResponseFromJSON(jsonValue));
    }

    /**
     * Use refresh token to renew bearer token
     * Renew Bearer token
     */
    async authRefreshTokens(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtTokenResponse> {
        const response = await this.authRefreshTokensRaw(initOverrides);
        return await response.value();
    }

}
